stargazer {
  hostname = "0.0.0.0"
  port = 8080
  port = ${?API_PORT}
  endpointHostname = "localhost"
  endpointHostname = ${?STARGAZER_ENDPOINT_HOSTNAME}
  timeout = 30 seconds
  timeout = ${?STARGAZER_TIMEOUT}
  // path to directory of web contents
  staticWeb = "target/build/main/web/"
  staticWeb = ${?STARGAZER_STATICWEB}

  // common service name
  svcName = "unknown"
  svcName = ${?STARGAZER_SVC_NAME}

  // common config for both front-end and back-end
  commonConfig {
    s3Config {
      linkExpiration = 600 seconds
    }

    recaptchaCommonConfig {
      isEnabled = false
      isEnabled = ${?STARGAZER_SERVICES_RECAPTCHA_ENABLED}
    }

    multiTenantConfig {
      tenantSuffix = ""
      tenantSuffix = ${?STARGAZER_SERVICES_TENANT_SUFFIX}
    }

    multiRegionConfig {
      isSecondaryRegion = false
      isSecondaryRegion = ${?STARGAZER_SERVICES_MULTI_REGION_ENABLE_SECONDARY_REGION}
      mainRegionEndpoint = "http://localhost:8080"
      mainRegionEndpoint = ${?STARGAZER_SERVICES_MULTI_REGION_MAIN_REGION_ENDPOINT}
    }
  }

  // config for the backend
  backendConfig {
    // server config
    server {
      baseUrl = ""
      baseUrl = ${?STARGAZER_SERVICES_BASE_URL}
      deployment = ""
      deployment = ${?STARGAZER_SERVICES_DEPLOYMENT}
      serviceFeatures = ""
      serviceFeatures = ${?STARGAZER_SERVICES_FEATURES}
    }

    // ATM, this is used to determine the type of current server (i.e., compared with baseUrl)
    // in order to have appropriate actions for live deal transactions vs. testing cases
    serverList {
      dealsUrl = "deals.anduintransact.com"
      demoUrl = "deals-demo.anduintransact.com"
      masterUrl = "canary.anduintransact.com"
      internalUrl = "gondor-internal.anduintransact.com"
    }

    // account service
    account {
      timeout = 10 seconds
      token {
        shouldRefreshBefore = 1 hour
        duration = 24 hours
        invitation = 30 days
      }
      cookie {
        expire = 1 day
        expire = ${?STARGAZER_SERVICES_COOKIE_EXPIRE}
      }
      accountTokenTimeoutConfig {
        verifyEmailTokenTimeout = 30 days
        verifyEmailTokenTimeout = ${?STARGAZER_SERVICES_VERIFY_EMAIL_TOKEN_TIMEOUT}
        resetPasswordTokenTimeout = 1 days
        resetPasswordTokenTimeout = ${?STARGAZER_SERVICES_RESET_PASSWORD_TOKEN_TIMEOUT}
        linkAccountTokenTimeout = 1 days
        linkAccountTokenTimeout = ${?STARGAZER_SERVICES_LINK_ACCOUNT_TOKEN_TIMEOUT}
      }
    }

    botUser {
      user = "anduin@anduintransact.com"
      password = "SBIWbnQFPkeuLAPRH51gjYMYWSzwhCyB6n" // This file is always on the backend so there is no way it can be leaked out
    }

    portalAdmin {
      user = "admin@anduintransact.com"
      password = "bDIIyDx0"
      password = ${?STARGAZER_SERVICES_PORTAL_ADMIN_PASSWORD}
    }

    executiveAdmin {
      user = "executiveadmin@anduintransact.com"
      password = "bDIIyDx0"
      password = ${?STARGAZER_SERVICES_EXECUTIVE_ADMIN_PASSWORD}
    }

    anduinInternalEntities = ""
    anduinInternalEntities = ${?STARGAZER_SERVICES_ANDUIN_INTERNAL_ENTITIES}

    // Sync_gateway service
    syncGateway {

      admin {
        host = "sync-gateway.anduin.local"
        host = ${?STARGAZER_SERVICES_SYNC_GATEWAY_INTERNAL_HOST}
        ssl = false
        port = 4985
        version = "0"
        timeout = 30 seconds
        retryTimes = 20
        retryInterval = 3 seconds
      }

      public {
        host = "sync-gateway.anduintransact.com"
        host = ${?STARGAZER_SERVICES_SYNC_GATEWAY_EXTERNAL_HOST}
        ssl = true
        ssl = ${?STARGAZER_SERVICES_SYNC_GATEWAY_EXTERNAL_SSL}
        port = 443
        port = ${?STARGAZER_SERVICES_SYNC_GATEWAY_EXTERNAL_PORT}
        version = "0"
        timeout = 30 seconds
        retryTimes = 20
        retryInterval = 3 seconds
      }

      internalPublic {
        host = "sync-gateway.anduintransact.com"
        host = ${?STARGAZER_SERVICES_SYNC_GATEWAY_INTERNAL_PUBLIC_HOST}
        ssl = false
        port = 4984
        version = "0"
        timeout = 30 seconds
        retryTimes = 20
        retryInterval = 3 seconds
      }
    }

    keycloak {
      admin {
        host = "sso.anduin.local"
        host = ${?STARGAZER_SERVICES_KEYCLOAK_ADMIN_HOST}
        ssl = false
        ssl = ${?STARGAZER_SERVICES_KEYCLOAK_ADMIN_SSL}
        port = 8080
        port = ${?STARGAZER_SERVICES_KEYCLOAK_ADMIN_PORT}
        realmToken = ""
        realmToken = ${?STARGAZER_SERVICES_KEYCLOAK_REALM_TOKEN}
      }
    }

    couchbase {
      host = "couchbase.anduin.local"
      host = ${?STARGAZER_SERVICES_COUCHBASE_INTERNAL_HOST}
      port = 8091
      username = ""
      username = ${?STARGAZER_SERVICES_COUCHBASE_RBAC_USERNAME}
      password = ""
      password = ${?STARGAZER_SERVICES_COUCHBASE_RBAC_PASSWORD}
      ioThreadPoolSize = 0 # Use all CPU cores
      computeThreadPoolSize = 0
    }

    cronCouchbaseConfig {
      couchbaseGroup       = "cron-sync"
      couchbaseGroup       = ${?STARGAZER_SERVICES_CRON_COUCHBASE_GROUP}
      couchbaseServiceName = "stargazer"
      couchbaseServiceName = ${?STARGAZER_SERVICES_COUCHBASE_SERVICE_NAME}
    }

    jwt {
      hmacKey = ""
      hmacKey = ${?STARGAZER_SERVICES_JWT_TOKEN_KEY}
      rsaKeyMapFile = ${?STARGAZER_SERVICES_JWT_RSA_KEY_MAP_FILE}
      defaultKid = ""
      defaultKid = ${?STARGAZER_SERVICES_JWT_RSA_DEFAULT_KID}
    }

    textract {
      snsConfig = {
        topicArn = ""
        topicArn = ${?STARGAZER_SERVICES_TEXTRACT_SNS_ARN}
        roleArn = ""
        roleArn = ${?STARGAZER_SERVICES_TEXTRACT_SNS_ROLE_ARN}
      }
      sqsEventQueue = ""
      sqsEventQueue = ${?STARGAZER_SERVICES_TEXTRACT_SQS_QUEUE}
      credentialConfig = {
        accessKeyId = ${stargazer.backendConfig.aws.accessKeyId}
        secretAccessKey = ${stargazer.backendConfig.aws.secretAccessKey}
        region = "us-east-1"
        region = ${?STARGAZER_SERVICES_TEXTRACT_AWS_REGION}
      }
      outputConfig = {
        s3Bucket = ""
        s3Bucket = ${?STARGAZER_SERVICES_TEXTRACT_S3_BUCKET}
        s3Prefix = ""
        s3Prefix = ${?STARGAZER_SERVICES_TEXTRACT_S3_PREFIX}
      }
    }

    ses {
      configurationSet = ""
      configurationSet = ${?STARGAZER_SES_CONFIGURATION_SET}
      s3Bucket = ""
      s3Bucket = ${?STARGAZER_SES_S3_BUCKET}
      sqsReceiveQueue = ""
      sqsReceiveQueue = ${?STARGAZER_SES_SQS_RECEIVE_QUEUE}
      sqsEventQueue = ""
      sqsEventQueue = ${?STARGAZER_SES_SQS_EVENT_QUEUE}
      s3CredentialConfig = {
        region = "us-east-1"
        region = ${?STARGAZER_SES_REGION}
      }
      region = "us-east-1"
      region = ${?STARGAZER_SES_REGION}
    }

    email {
      highEngagementDomain = "anduin.email"
      highEngagementDomain = ${?STARGAZER_EMAIL_HIGH_ENGAGEMENT_DOMAIN}
      standardDomain = "anduin.email"
      standardDomain = ${?STARGAZER_EMAIL_STANDARD_DOMAIN}
      sending {
        disableSendingEmail = false
        disableSendingEmail = ${?STARGAZER_EMAIL_SENDING_DISABLE}
        throttleOneMessagePerDuration = 2 seconds
        throttleOneMessagePerDuration = ${?STARGAZER_EMAIL_SENDING_THROTTLE_ONE_MESSAGE}
        dynamoDbStatusTable = ""
        dynamoDbStatusTable = ${?STARGAZER_EMAIL_SENDING_DYNAMO_DB_STATUS_TABLE}
      }
    }

    aws {
      S3 {
        bucket = ""
        bucket = ${?STARGAZER_S3_DEFAULT_BUCKET}
        batchDownloadBucket = ""
        batchDownloadBucket = ${?STARGAZER_S3_BATCH_DOWNLOAD_BUCKET}
        publicBucket = ""
        publicBucket = ${?STARGAZER_S3_PUBLIC_BUCKET}
        formTemplateBucket = ""
        formTemplateBucket = ${?STARGAZER_S3_FORM_TEMPLATE_BUCKET}
        dataExportBucket = ""
        dataExportBucket = ${?STARGAZER_S3_EXPORT_BUCKET}
        formStorageBucket = ""
        formStorageBucket = ${?STARGAZER_S3_FORM_STORAGE_BUCKET}
        emailStorageBucket = ""
        emailStorageBucket = ${?STARGAZER_S3_EMAIL_STORAGE_BUCKET}
        resourcesBucket = ""
        resourcesBucket = ${?STARGAZER_S3_RESOURCES_BUCKET}
        s3CredentialConfig = {
          region = "us-east-1"
          region = ${?STARGAZER_S3_REGION}
        }
        cloudFrontConfig = {
          cloudFrontEnabled = false
          cloudFrontEnabled = ${?STARGAZER_S3_CLOUD_FRONT_ENABLED}
          domain = ""
          domain = ${?STARGAZER_S3_CLOUD_FRONT_DOMAIN}
          keyPairId = ""
          keyPairId = ${?STARGAZER_S3_CLOUD_FRONT_KEYPAIR_ID}
          privateKeyValue = ""
          privateKeyValue = ${?STARGAZER_S3_CLOUD_FRONT_PRIVATE_KEY}
        }
      }

      dynamoDbConfig {
        region = "us-east-1"
        region = ${?STARGAZER_SERVICE_DYNAMODB_REGION}
      }

      cloudwatchLogConfig {
        region = "us-east-1"
        region = ${?STARGAZER_SERVICE_CLOUDWATCH_LOG_REGION}
      }

      accessKeyId = ""
      accessKeyId = ${?STARGAZER_AWS_ACCESS_KEY_ID}
      secretAccessKey = ""
      secretAccessKey = ${?STARGAZER_AWS_SECRET_ACCESS_KEY}
    }

    redirect {
      // Set a very long duration since jwt standard requires an expiry,
      // but we dont really want the token to be expired here.
      // Note that a very long duration is not a security best practice,
      // but in this use case, the redirect jwt token is not used for security
      // reasons, it simply encapsulates the page claim for redirection,
      // the user still needs to go through other authentication and
      // authorization to ensure security.
      duration = 3650 days // 10 years
    }

    libreOffice {
      soffice = "/usr/bin/soffice"
      tmpFolder = "/tmp"
    }

    googleCloudConfig {
      bigQueryConfig = {
        credentialFile = ""
        credentialFile = ${?STARGAZER_SERVICE_BIG_QUERY_CREDENTIAL_FILE}
        projectId = ""
        projectId = ${?STARGAZER_SERVICE_BIG_QUERY_PROJECT_ID}
        datasetId = ""
        datasetId = ${?STARGAZER_SERVICE_BIG_QUERY_DATASET_ID}
      }
    }

    serverlessConfig {
      serverlessRegionConfig {
        bucket = ${stargazer.backendConfig.aws.S3.bucket}
      }

      serverlessSqsConfig {
        queueName = ""
        queueName = ${?STARGAZER_SERVICES_SERVERLESS_ASYNC_SQS_QUEUE}
      }
    }

    foundationDbConfig {
      host = ""
      host = ${?STARGAZER_SERVICES_FOUNDATIONDB_HOST}
      port = 4500
      port = ${?STARGAZER_SERVICES_FOUNDATIONDB_PORT}
      localTempFileName = "foundationdb"
      localTempFileExtension = ".cluster"
      localTempDirectory = "/tmp"
    }

    boxConfig {
      accessToken = ""
      accessToken = ${?STARGAZER_SERVICES_BOX_ACCESS_TOKEN}
    }

    dropboxConfig {
      accessToken = ""
      accessToken = ${?STARGAZER_SERVICES_DROPBOX_ACCESS_TOKEN}
    }

    driveConfig {
      key = ""
      key = ${?STARGAZER_SERVICES_GOOGLE_DRIVE_SA_KEY}
    }

    sharePointConfig {
      username = ""
      username = ${?STARGAZER_SERVICES_SHAREPOINT_USERNAME}
      password = ""
      password = ${?STARGAZER_SERVICES_SHAREPOINT_PASSWORD}
      tenant = ""
      tenant = ${?STARGAZER_SERVICES_SHAREPOINT_TENANT}
      clientId = ""
      clientId = ${?STARGAZER_SERVICES_SHAREPOINT_CLIENT_ID}
      clientSecret = ""
      clientSecret = ${?STARGAZER_SERVICES_SHAREPOINT_CLIENT_SECRET}
      scope = ""
      scope = ${?STARGAZER_SERVICES_SHAREPOINT_SCOPE}
      encryptedPass = ""
      encryptedPass = ${?STARGAZER_SERVICES_SHAREPOINT_ENCRYPTED_PASS}
    }

    sftpServerConfig {
      publicKey = ""
      publicKey = ${?STARGAZER_SERVICES_SFTP_SERVER_PUBLIC_KEY}
      privateKey = ""
      privateKey = ${?STARGAZER_SERVICES_SFTP_SERVER_PRIVATE_KEY}
    }

    analyticsConfig {
      s3Bucket = ""
      s3Bucket = ${?STARGAZER_SERVICES_ANALYTICS_S3_BUCKET}
      s3Prefix = ""
      s3Prefix = ${?STARGAZER_SERVICES_ANALYTICS_S3_PREFIX}
    }

    customDomainConfig {
      seedCustomDomains = ""
      seedCustomDomains = ${?STARGAZER_SERVICES_SEED_CUSTOM_DOMAINS}
    }

    recaptchaBackendConfig {
      secret = ""
      secret = ${?STARGAZER_SERVICES_RECAPTCHA_SECRET}
    }

    recaptchaV3BackendConfig {
      secret = ""
      secret = ${?STARGAZER_SERVICES_RECAPTCHA_V3_SECRET}
    }

    oauth2Config {
      clients = [
        {
          name = "google"
          clientId = ""
          clientId = ${?STARGAZER_SERVICES_OAUTH2_GOOGLE_CLIENT_ID}
          secret = ""
          secret = ${?STARGAZER_SERVICES_OAUTH2_GOOGLE_SECRET}
        }
      ]
      enableSkipLinkAccount = false
      enableSkipLinkAccount = ${?STARGAZER_SERVICES_OAUTH2_ENABLE_SKIP_LINK_ACCOUNT}
    }

    encryptionConfig {
      masterKeyKMSArn = ""
      masterKeyKMSArn = ${?STARGAZER_SERVICES_MASTER_KEY_ARN}
      encryptedDataKeyBlob = ""
      encryptedDataKeyBlob = ${?STARGAZER_SERVICES_ENCRYPTED_DATA_KEY_BLOB}
    }

    timescaleConfig {
      host = ""
      host = ${?STARGAZER_SERVICES_TIMESCALEDB_HOST}
      port = 5432
      port = ${?STARGAZER_SERVICES_TIMESCALEDB_PORT}
      username = "timescaledb"
      username = ${?STARGAZER_SERVICES_TIMESCALEDB_USERNAME}
      password = "timescaledb"
      password = ${?STARGAZER_SERVICES_TIMESCALEDB_PASSWORD}
      databaseName = "timescaledb"
      databaseName = ${?STARGAZER_SERVICES_TIMESCALEDB_DATABASE_NAME}
      concurrentSessions = 32
      concurrentSessions = ${?STARGAZER_SERVICES_TIMESCALEDB_CONCURRENT_SESSIONS}
    }

    temporalConfig {
      host = ""
      host = ${?STARGAZER_SERVICES_TEMPORAL_HOST}
      port = 7233
      port = ${?STARGAZER_SERVICES_TEMPORAL_PORT}
      namespace = "default"
      namespace = ${?STARGAZER_SERVICES_TEMPORAL_NAMESPACE}
    }

    formConfig {
      sharedSecret = ""
      sharedSecret = ${?STARGAZER_SERVICES_FORM_SHARED_SECRET}
    }

    dgraphConfig {
      httpEndpoint = ""
      httpEndpoint = ${?STARGAZER_SERVICES_DGRAPH_HTTP_ENDPOINT}
      grpcEndpoint = ""
      grpcEndpoint = ${?STARGAZER_SERVICES_DGRAPH_GRPC_ENDPOINT}
    }

    fusekiConfig {
      endpoint = ""
      endpoint = ${?STARGAZER_SERVICES_FUSEKI_ENDPOINT}
    }

    enterpriseLoginConfig {
       samlConfig {
         entityId = ""
         entityId = ${?STARGAZER_SERVICES_SAML_ENTITY_ID}
       }
    }

    kafkaConfig {
        bootstrapServer: ${akka.kafka.consumer.kafka-clients.bootstrap.servers}
    }

    pulsarConfig {
        bootstrapServer: "pulsar://pulsar:6650"
        bootstrapServer: ${?STARGAZER_SERVICES_PULSAR_BOOTSTRAP_SERVER}
    }

    twilioConfig {
      accountSid = ""
      accountSid = ${?STARGAZER_SERVICES_TWILIO_ACCOUNT_SID}
      messageServiceId = ""
      messageServiceId = ${?STARGAZER_SERVICES_TWILIO_MESSAGE_SERVICE_ID}
      keySid = ""
      keySid = ${?STARGAZER_SERVICES_TWILIO_KEY_SID}
      keySecret = ""
      keySecret = ${?STARGAZER_SERVICES_TWILIO_KEY_SECRET}
    }

    tykConfig {
      admin {
        host = "tyk-control.gondor.svc.kube-local.io"
        host = ${?STARGAZER_SERVICES_TYK_ADMIN_HOST}
        ssl = false
        ssl = ${?STARGAZER_SERVICES_TYK_ADMIN_SSL}
        port = 80
        port = ${?STARGAZER_SERVICES_TYK_ADMIN_PORT}
        secret = "Mp8x99cpdzRNzyH87P6zm6CQaS8tR5C7"
        secret = ${?STARGAZER_SERVICES_TYK_ADMIN_SECRET}
      }

      http {
        host = "tyk-http.gondor.svc.kube-local.io"
        host = ${?STARGAZER_SERVICES_TYK_HTTP_HOST}
        ssl = false
        ssl = ${?STARGAZER_SERVICES_TYK_HTTP_SSL}
        port = 80
        port = ${?STARGAZER_SERVICES_TYK_HTTP_PORT}
        secret = ""
        secret = ${?STARGAZER_SERVICES_TYK_HTTP_SECRET}
      }
    }

    cassandraConfig {
      host = ""
      host = ${?STARGAZER_SERVICES_CASSANDRA_HOST}
      replication = 1
      replication = ${?STARGAZER_SERVICES_CASSANDRA_REPLICATION}
    }

    systemAuditLogConfig {
      enable = true
      logGroup = ""
      logGroup = ${?STARGAZER_SERVICES_SYSTEM_AUDIT_LOG_GROUP}
    }

    docusignIntegrationConfig {
      webhookBaseUrl = ""
      webhookBaseUrl = ${stargazer.backendConfig.server.baseUrl}
      webhookHandlerTopic = "docusign-webhook-handler-topic"
      webhookHandlerTopic = ${?STARGAZER_DOCUSIGN_WEBHOOK_TOPIC}

      canUseDocusignProduction = false
      canUseDocusignProduction = ${?STARGAZER_DOCUSIGN_CAN_USE_PROD}
      demoAppConfig {
        docusignOAuthBasePath = "account-d.docusign.com"
        docusignApiBasePath = "https://demo.docusign.net/restapi"
        integrationKey = ""
        integrationKey = ${?STARGAZER_DOCUSIGN_DEMO_INTEGRATION_KEY}
        rsaPrivateKey = ""
        rsaPrivateKey = ${?STARGAZER_DOCUSIGN_DEMO_RSA_KEY}
        apiAccountId = ""
        apiAccountId = ${?STARGAZER_DOCUSIGN_DEMO_ACCOUNT_ID}
        apiUserId = ""
        apiUserId = ${?STARGAZER_DOCUSIGN_DEMO_USER_ID}
        hmacKey = ""
        hmacKey = ${?STARGAZER_DOCUSIGN_DEMO_HMAC_KEY}
      }
      productionAppConfig {
        docusignOAuthBasePath = "account.docusign.com"
        docusignApiBasePath = "https://na4.docusign.net/restapi"
        integrationKey = ""
        integrationKey = ${?STARGAZER_DOCUSIGN_PROD_INTEGRATION_KEY}
        rsaPrivateKey = ""
        rsaPrivateKey = ${?STARGAZER_DOCUSIGN_PROD_RSA_KEY}
        apiAccountId = ""
        apiAccountId = ${?STARGAZER_DOCUSIGN_PROD_ACCOUNT_ID}
        apiUserId = ""
        apiUserId = ${?STARGAZER_DOCUSIGN_PROD_USER_ID}
        hmacKey = ""
        hmacKey = ${?STARGAZER_DOCUSIGN_PROD_HMAC_KEY}
      }
    }

    rebacConfig {

      openFgaConfig {
        host = ""
        host = ${?STARGAZER_SERVICES_OPENFGA_HOST}
        port = 8080
        port = ${?STARGAZER_SERVICES_OPENFGA_PORT}
      }

      openFgaFundConfig {
        host = ""
        host = ${?STARGAZER_SERVICES_OPENFGA_FUND_HOST}
        port = 8080
        port = ${?STARGAZER_SERVICES_OPENFGA_FUND_PORT}
      }
    }

    edgedbConfig {
      host = ""
      host = ${?STARGAZER_SERVICES_EDGEDB_HOST}
      port = 5656
      port = ${?STARGAZER_SERVICES_EDGEDB_PORT}
      database = "edgedb"
      database = ${?STARGAZER_SERVICES_EDGEDB_DB}

      user = {
        user = "edgedb"
        user = ${?STARGAZER_SERVICES_EDGEDB_USER}
        password = ""
        password = ${?STARGAZER_SERVICES_EDGEDB_ROOT_PASSWORD}
      }
    }

    tidbConfig = {
      host = ""
      host = ${?STARGAZER_SERVICES_TIDB_HOST}
      port = 4000
      port = ${?STARGAZER_SERVICES_TIDB_PORT}
      database = ""
      database = ${?STARGAZER_SERVICES_TIDB_DB}

      user {
        user = ""
        user = ${?STARGAZER_SERVICES_TIDB_USER}
        password = ""
        password = ${?STARGAZER_SERVICES_TIDB_USER_PASSWORD}
      }
    }

    tidbCdcConfig = {
      host = ""
      host = ${?STARGAZER_SERVICES_TIDB_CDC_HOST}
      port = 8301
      port = ${?STARGAZER_SERVICES_TIDB_CDC_PORT}
    }

    pinotConfig = {
      zkHost = ""
      zkHost = ${?STARGAZER_SERVICES_PINOT_ZK_HOST}
      zkPort = 2181
      zkPort = ${?STARGAZER_SERVICES_PINOT_ZK_PORT}
      clusterName = ""
      clusterName = ${?STARGAZER_SERVICES_PINOT_CLUSTER_NAME}
    }

    pinotControllerConfig = {
      host = ""
      host = ${?STARGAZER_SERVICES_PINOT_CONTROLLER_HOST}
      port = 9000
      port = ${?STARGAZER_SERVICES_PINOT_CONTROLLER_PORT}
    }

    yugabyteConfig = {
      host = ""
      host = ${?STARGAZER_SERVICES_YB_HOST}
      port = 4000
      port = ${?STARGAZER_SERVICES_YB_PORT}
      database = ""
      database = ${?STARGAZER_SERVICES_YB_DB}

      user {
        user = ""
        user = ${?STARGAZER_SERVICES_YB_USER}
        password = ""
        password = ${?STARGAZER_SERVICES_YB_USER_PASSWORD}
      }
    }

    tracingConfig = {
      isEnabled = false
      isEnabled = ${?STARGAZER_TRACING_ENABLED}
      collectorSchema = "http"
      collectorSchema = ${?STARGAZER_TRACING_COLLECTOR_SCHEMA}
      collectorEndpoint = ""
      collectorEndpoint = ${?STARGAZER_TRACING_COLLECTOR_ENDPOINT}
      collectorPort = 14250
      collectorPort = ${?STARGAZER_TRACING_COLLECTOR_PORT}
    }

    profilerConfig = {
      isEnabled = false
      isEnabled = ${?STARGAZER_PROFILER_ENABLED}
      isEnabledMultiEvent = false
      isEnabledMultiEvent = ${?STARGAZER_PROFILER_ENABLED_MULTI_EVENT}
      profilerEndpoint = ""
      profilerEndpoint = ${?STARGAZER_PROFILER_ENDPOINT}
    }

    environmentConfig {
      fallbackSubdomain = ""
      fallbackSubdomain = ${?STARGAZER_ENVIRONMENT_FALLBACK_SUBDOMAIN}
      internalSubdomains = ""
      internalSubdomains = ${?STARGAZER_ENVIRONMENT_INTERNAL_SUBDOMAINS}
      externalTargetDomain = ""
      externalTargetDomain = ${?STARGAZER_ENVIRONMENT_EXTERNAL_TARGET_DOMAIN}
    }

    globalSignConfig {
      baseUrl = ""
      baseUrl = ${?STARGAZER_GLOBAL_SIGN_BASE_URL}
      apiKey = ""
      apiKey = ${?STARGAZER_GLOBAL_SIGN_API_KEY}
      apiSecret = ""
      apiSecret = ${?STARGAZER_GLOBAL_SIGN_API_SECRET}
    }

    dataPipelineConfig {
      enableDataIngest = true
      enableDataIngest = ${?STARGAZER_DATAPIPELINE_ENABLED}
      enableDataTransform = true
      enableDataTransform = ${?STARGAZER_DATAPIPELINE_ENABLED}
      enableDataCorrectionCron = true
      enableDataCorrectionCron = ${?STARGAZER_DATAPIPELINE_ENABLED}
    }

    actionLoggerConfig {
      isEnabled = false
      isEnabled = ${?STARGAZER_ACTIONLOGGER_ENABLED}
      flushInterval = 10 minutes
      flushInterval = ${?STARGAZER_ACTIONLOGGER_FLUSH_INTERVAL}
      bufferCapacity = 300
      bufferCapacity = ${?STARGAZER_ACTIONLOGGER_BUFFER_CAPACTITY}
    }

    natsConfig {
      rpcEndpoint = ""
      rpcEndpoint = ${?STARGAZER_NATS_RPC_ENDPOINT}
      accountSeed = ""
      accountSeed = ${?STARGAZER_NATS_ACCOUNT_SEED}
      wsEndpoint = ""
      wsEndpoint = ${?STARGAZER_NATS_WS_ENDPOINT}
    }

    multiRegionConfig {
      sharedKey = "575cdbb7b559764ed1e8697095ac68ad"
      sharedKey = ${?STARGAZER_SERVICES_MULTI_REGION_SHARED_KEY}
    }
  }

  // frontend config
  frontendConfig {

    mail = {
      domain = ${?stargazer.backendConfig.email.standardDomain}
    }

    syncGatewayClient = {
      minRetryDelay = 10 seconds
      maxRetryDelay = 80 seconds
      waitForActiveConnection = 30 seconds
      limit = 1000
      limit = ${?STARGAZER_SYNC_GATEWAY_CLIENT_DOC_LIMIT}
    }

    onlyOffice {
      scheme = ""
      scheme = ${?STARGAZER_ONLYOFFICE_SCHEME}
      host = ""
      host = ${?STARGAZER_ONLYOFFICE_HOST}
      publicScheme = ""
      publicScheme = ${?STARGAZER_ONLYOFFICE_PUBLIC_SCHEME}
      publicHost = ""
      publicHost = ${?STARGAZER_ONLYOFFICE_PUBLIC_HOST}
      gondorServer = ""
      gondorServer = ${?STARGAZER_ONLYOFFICE_GONDOR_SERVER}
    }

    server : ${stargazer.backendConfig.server}
    serverList : ${stargazer.backendConfig.serverList}

    recaptchaFrontendConfig {
      sitekey = ""
      sitekey = ${?STARGAZER_SERVICES_RECAPTCHA_SITEKEY}
    }

    recaptchaV3FrontendConfig {
      sitekey = ""
      sitekey = ${?STARGAZER_SERVICES_RECAPTCHA_V3_SITEKEY}
    }

    oauth2FrontendConfig {
      clients = [
        {
          name = "google"
          isEnabled = false
          isEnabled = ${?STARGAZER_SERVICES_OAUTH2_GOOGLE_ENABLED}
        }
      ]
    }

    gtmConfig {
      containerId = ""
      containerId = ${?STARGAZER_SERVICES_GTM_CONTAINER_ID}
    }

    survicateConfig {
      fundSubSurveyUrl = ""
      fundSubSurveyUrl = ${?STARGAZER_SERVICES_SURVICATE_FUNDSUB_SURVEY_URL}
    }

    getFeedbackConfig {
        fundSubButtonId = ""
        fundSubButtonId = ${?STARGAZER_SERVICES_GETFEEDBACK_FUNDSUB_BUTTON_ID}
    }
  }

  customerSupport {
    contact = ""
    contact = ${?STARGAZER_CUSTOMER_SUPPORT_EMAIL}
  }

  publicApiConfig {
    endpointTimeoutConfig = {
      default = 60 seconds
      default = ${?STARGAZER_PUBLIC_API_ENDPOINT_TIMEOUT_DEFAULT}
    }

    temporalWorkflowConfig = {
      workflowRunDefaultTimeout = 60 minutes
      workflowRunDefaultTimeout = ${?STARGAZER_PUBLIC_API_TEMPORAL_WORKFLOW_WORKFLOW_RUN_DEFAULT_TIMEOUT}
      activityStartToCloseDefaultTimeout = 60 seconds
      activityStartToCloseDefaultTimeout = ${?STARGAZER_PUBLIC_API_TEMPORAL_WORKFLOW_ACTIVITY_START_TO_CLOSE_DEFAULT_TIMEOUT}
    }

    createOrderConfig = {
      maxConcurrentActivityExecutionSize = 20
      maxConcurrentActivityExecutionSize = ${?STARGAZER_PUBLIC_API_CREATE_ORDER_MAX_CONCURRENT_ACTIVITY_EXECUTION_SIZE}
      maxConcurrentTaskExecutionSize = 20
      maxConcurrentTaskExecutionSize = ${?STARGAZER_PUBLIC_API_CREATE_ORDER_MAX_CONCURRENT_TASK_EXECUTION_SIZE}
      activityTimeout = 30 seconds
      activityTimeout = ${?STARGAZER_PUBLIC_API_CREATE_ORDER_ACTIVITY_TIMEOUT}
    }
  }
}

valinor {
  timeout = 300 seconds
  dropbox {
    accessToken = "DROPBOX-ACCESS-TOKEN"
    accessToken = ${?STARGAZER_DROPBOX_ACCESS_TOKEN}
  }
}

nebula {
  kafka {
    bootstrapServer = ""
    bootstrapServer = ${?STARGAZER_KAFKA_BOOTSTRAP_SERVER}
  }
}


alpakka.s3 {
  # whether the buffer request chunks (up to 5MB each) to "memory" or "disk"
  buffer = "memory"

  # location for temporary files, if buffer is set to "disk". If empty, uses the standard java temp path.
  disk-buffer-path = ""

  proxy {
    # hostname of the proxy. If undefined ("") proxy is not enabled.
    host = ""
    port = 8000

    # if "secure" is set to "true" then HTTPS will be used for all requests to S3, otherwise HTTP will be used
    secure = true
  }

  # default values for AWS configuration
  aws {
    # If this section is absent, the fallback behavior is
    # to use the same configuration as if credentials.provider = default
    credentials {
      # anonymous requests (no auth)
      #
      # provider = anon

      # static credentials
      #
      provider = static
      access-key-id = ${stargazer.backendConfig.aws.S3.accessKeyId}
      secret-access-key = ${stargazer.backendConfig.aws.S3.secretAccessKey}
      # token = "" # optional

      # default: as described in com.amazonaws.auth.DefaultAWSCredentialsProviderChain docs,
      # attempts to get the credentials from either:
      #   - environment variables
      #   - system properties
      #   - credentials file
      #   - EC2 credentials service
      #   - IAM / metadata
      # provider = default
    }

    # If this section is absent, the fallback behavior is
    # to use the same configuration as if region.provider = default
    region {
      # static credentials
      #
      provider = static
      default-region = ${stargazer.backendConfig.aws.S3.region}

      # default: as described in com.amazonaws.regions.AwsRegionProvider.DefaultAwsRegionProviderChain docs,
      # attempts to get the region from either:
      #   - environment variables
      #   - system properties
      #   - progile file
      #   - EC2 metadata
      # provider = default
    }
  }

  # Custom endpoint url, used for alternate s3 implementations
  # endpoint-url = null

  # Which version of the list bucket api to use. Set to 1 to use the old style version 1 API.
  # By default the newer version 2 api is used.
  list-bucket-api-version = 2
}

akka {
  kafka {
    producer {
      kafka-clients {
        bootstrap.servers: ""
        bootstrap.servers: ${?STARGAZER_KAFKA_BOOTSTRAP_SERVER}
      }
    }

    consumer {
      kafka-clients {
        bootstrap.servers: ""
        bootstrap.servers: ${?STARGAZER_KAFKA_BOOTSTRAP_SERVER}
      }
    }
  }
}

armeriaHttpClient {
  globalSignIntegrationClient {
    keyStoreFile = ""
    keyStoreFile = ${?STARGAZER_GLOBAL_SIGN_KEY_STORE}
    keyStorePass = ""
    keyStorePass = ${?STARGAZER_GLOBAL_SIGN_KEY_STORE_PASS}
  }
}
